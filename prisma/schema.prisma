// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

/// User schema
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Admin?
  checker   Checker?
  peoples   Peoples?
  manager   Manager?
}

/// Admin creates organizations, add users and assigns roles to users like people, manager, checker
model Admin {
  uid            String       @id
  user           User         @relation(fields: [uid], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@index([uid])
  @@index([organizationId])
}

/// Manager can approve the token request
model Manager {
  uid            String       @id
  user           User         @relation(fields: [uid], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  token Token[]

  @@index([uid])
  @@index([organizationId])
}

/// Checker can check the token status and check entry and exit
model Checker {
  uid            String       @id
  user           User         @relation(fields: [uid], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  token Token[]

  @@index([uid])
  @@index([organizationId])
}

/// Organization schema
model Organization {
  id                    String    @id @default(uuid())
  name                  String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  peoples               Peoples[]
  admin                 Admin[]
  checker               Checker[]
  Manager               Manager[]
  unrestrictedStartTime DateTime  @db.Time()
  unrestrictedEndTime   DateTime  @db.Time()

  @@index([id, name])
}

/// Students schema
model Peoples {
  user           User         @relation(fields: [uid], references: [id])
  uid            String       @id
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  token Token[]

  @@index([organizationId])
  @@index([uid])
}

/// Token Status
enum TokenStatus {
  REQUESTED
  ISSUED
  REJECTED
  // When user is not late and returned
  EXPIRED
  IN_USE
  RETURNED_BEFORE_ISSUED
  RETURNED_AFTER_ISSUED
  LATE
}

/// Token schema
model Token {
  token  String @id @default(uuid())
  reason String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  issuedBy       Peoples     @relation(fields: [issuedById], references: [uid])
  issuedById     String
  organizationId String
  status         TokenStatus @default(REQUESTED)

  startTime DateTime
  endTime   DateTime

  acceptedTime  DateTime
  acceptedBy    Manager? @relation(fields: [acceptedByUid], references: [uid])
  acceptedByUid String

  exitTime     DateTime
  returnedTime DateTime

  checkedBy    Checker? @relation(fields: [checkedByUid], references: [uid])
  checkedByUid String

  lateEntry lateEntry?

  @@index([token])
  @@index([issuedById, organizationId])
  @@index([acceptedByUid, organizationId])
  @@index([checkedByUid, organizationId])
}

/// Late Entry
model lateEntry {
  referedToken      Token    @relation(fields: [token], references: [token])
  token             String   @id
  expectedEntryTime DateTime

  reason    String
  createdAt DateTime @default(now())

  @@index([token])
}
